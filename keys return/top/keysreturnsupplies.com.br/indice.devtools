<!--

~ Maked By BitXano
 ~ bitxano.xyz
 ~ github.com/bitxano
 ~ t.me/bitxano

⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣠⣤⣴⣶⣶⣶⣿⣿⣿⣿⣿⣿⣿⣷⣶⣶⣦⣤⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣴⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣤⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣤⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣤⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣄⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⢀⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⡀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⣠⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⣰⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⡀⠀⠀⠀
⠀⠀⠀⠀⣰⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡄⠀⠀
⠀⠀⠀⢠⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⡀⠀
⠀⠀⠀⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⠀
⠀⠀⢰⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡄
⠀⠀⣸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣇
⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⠀⣰⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠃⣸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠿⠿⣿⣿⣿⣿⣿⣿⣿⡟⠀⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇
⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠟⠋⠁⠀⠀⠀⠀⠹⣿⣿⣿⣿⡿⠁⠀⠀⠀⠉⠙⢿⣿⣿⣿⣿⣿⣿⣿⣿⠃
⠀⠙⢿⡝⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠛⠿⠟⠁⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⡏⠀
⠀⠀⠀⠙⠀⠹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⣿⣿⣿⣿⣿⡿⠀⠀
⠀⠀⢀⣤⠀⠀⠈⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠟⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⣾⣷⣄⠀⠀⠀⠀⠀⣼⣿⣿⣿⣿⣿⣿⠇⠀⠀
⠀⠀⣾⠃⠀⠀⠀⢀⢻⣿⣿⣿⣿⣿⣿⣿⣿⠿⠛⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⣿⣿⣿⣿⡆⠀⠀⠀⢰⣿⣿⣿⣿⣿⣿⡟⠀⠀⠀
⠀⡼⠿⣦⡀⠀⠀⣸⣼⣿⣿⣿⣿⣿⡿⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣴⣿⣿⣿⣿⣿⣿⠀⠀⠀⣿⣿⣿⣿⣿⣿⡟⠀⠀⠀⠀
⠀⣠⣶⣿⣿⣶⣶⣿⣿⣿⣿⣿⣿⣿⢡⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣾⣿⣿⣿⣿⣿⣿⡿⠀⠀⣸⣿⣿⣿⣿⣿⠟⠀⠀⠀⠀⠀
⠰⣿⣿⣿⣿⣿⣿⣿⣿⡿⣿⣿⣿⣟⣾⣿⣶⣤⣀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣶⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⢠⣿⣿⣿⣿⡿⠋⠀⠀⠀⠀⠀⠀
⠀⢻⣿⣿⣿⣿⣿⠟⣿⠸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣶⣶⣶⣶⣶⣶⣶⣶⣶⣶⣶⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⠇⠀⣼⣿⠿⠛⠁⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⢻⣿⣿⣿⡏⢸⡇⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⠛⠛⢿⣿⣿⣿⣿⣿⣿⣿⡏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠙⠿⣿⡄⣿⠃⠀⠹⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣇⠀⠀⠈⢿⣿⣿⣿⣿⣿⠟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠸⣿⣿⣆⣀⣤⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⣿⣿⣿⣿⣿⣿⣿⣿⣦⠀⠀⠈⢻⣿⣿⣿⠏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠋⠀⠘⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⡀⠀⠀⠛⠛⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⢀⣾⣿⡆⠘⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⢸⣿⣿⡇⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠈⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⢸⣿⡟⠀⠀⢹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣟⢻⣿⣿⣿⣿⣿⣿⣿⣿⡇⠈⠉⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⠘⣿⣿⣿⠈⣿⣿⣿⣿⣷⣦⡄⠀⠀⠀⣸⣿⣿⣿⣿⣿⣿⣿⡿⠿⠛⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⡇⢿⣿⣿⡆⢹⣿⣿⣿⣿⣿⣿⠀⠀⢀⣿⣿⣿⣿⣿⠟⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⠸⣿⣿⣧⠸⣿⣿⣿⣿⣿⣿⡇⠀⠘⠿⠿⠛⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢨⣿⡄⣿⣿⣿⠀⣿⣿⣿⣿⣿⣿⣷⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⠇⢸⣿⣿⡇⢸⣿⣿⣿⣿⣿⣿⠟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠻⠇⠘⣿⣿⡿⠿⠛⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀

-->

<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="color-scheme" content="light">
    <meta name="supported-color-schemes" content="light">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="default">
    <title>NexKeys - Home</title>
    
    <meta property="og:title" content="Next System - Gerencie suas contas">
    <meta property="og:description" content="Acesse suas credenciais de forma segura e organizada. Simplicidade e proteção em um só lugar.">
    <meta property="og:image" content="https://i.imgur.com/81xiGlQ.png">
    <meta property="og:image:width" content="613">
    <meta property="og:image:height" content="613">
    <meta property="og:url" content="https://nextsystem.site">
    <meta property="og:type" content="website">
    <meta property="og:site_name" content="Next System">
    <meta property="og:locale" content="pt_BR">
    <meta property="theme-color" content="#10b981">
    
    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:title" content="Next System - Gerencie suas contas">
    <meta name="twitter:description" content="Acesse suas credenciais de forma segura e organizada. Simplicidade e proteção em um só lugar.">
    <meta name="twitter:image" content="https://i.imgur.com/81xiGlQ.png">
    
    <meta name="description" content="Acesse suas credenciais de forma segura e organizada. Simplicidade e proteção em um só lugar.">
    <meta name="keywords" content="gerenciador, contas, credenciais, segurança, acesso, next system, netflix, disney, hbo, paramount, crunchyroll, funimation, spotify, deezer, tidal, apple music, youtube premium, twitch, discord nitro, steam, epic games, origin, uplay, battle.net, minecraft, roblox, fortnite, valorant, csgo, league of legends, dota 2, overwatch, apex legends, call of duty, warzone, gta, red dead redemption, assassin's creed, fifa, pes, nba 2k, madden, nhl, mlb, the show, ufc, wwe, aew, boxing, mma, streaming, gaming, entertainment, digital, online, premium, subscription, service">
    <meta name="author" content="Next System">
    <meta name="robots" content="index, follow">
    <link rel="icon" type="image/png" href="https://i.imgur.com/81xiGlQ.png">
    <link rel="shortcut icon" href="https://i.imgur.com/81xiGlQ.png">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', sans-serif;
            background: linear-gradient(135deg, #1a1a1a 0%, #0d0d0d 25%, #050505 50%, #000 100%);
            color: #fff;
            height: 100vh;
            overflow: hidden;
            position: relative;
            color-scheme: light;
        }

        body::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-image: 
                linear-gradient(rgba(16, 185, 129, 0.03) 1px, transparent 1px),
                linear-gradient(90deg, rgba(16, 185, 129, 0.03) 1px, transparent 1px);
            background-size: 20px 20px;
            pointer-events: none;
            z-index: -1;
            animation: gridMove 20s ease-in-out infinite;
        }

        @keyframes gridMove {
            0%, 100% { transform: translate(0, 0); }
            25% { transform: translate(2px, -1px); }
            50% { transform: translate(-1px, 2px); }
            75% { transform: translate(1px, 1px); }
        }

        .container {
            height: 100vh;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
        }

        header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 1rem 4rem;
            font-size: 0.8rem;
        }

        .logo {
            font-size: 0.9rem;
            font-weight: 600;
            color: #fff;
            display: flex;
            align-items: center;
            gap: 0.3rem;
            transition: color 0.1s ease, border-color 0.1s ease, stroke 0.1s ease;
        }

        .logo:hover {
            color: #10b981;
        }

        .logo:hover .logo-icon path {
            stroke: #10b981;
        }

        .logo-icon {
            width: 16px;
            height: 16px;
        }

        .btn {
            padding: 0.4rem 1rem;
            background: transparent;
            border: 0.5px solid #fff;
            color: #fff;
            cursor: pointer;
            transition: background 0.3s ease, border-color 0.3s ease, color 0.3s ease;
            border-radius: 4px;
            font-family: 'Inter', sans-serif;
            font-weight: 500;
            font-size: 0.8rem;
            display: flex;
            align-items: center;
            gap: 0.3rem;
        }

        .btn:hover {
            border-color: #10b981;
            color: #10b981;
            background: rgba(16, 185, 129, 0.1);
        }

        main {
            flex: 1;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            text-align: center;
            padding: 0 2rem;
        }

        .badge {
            background: linear-gradient(135deg, rgba(255, 255, 255, 0.1), rgba(255, 255, 255, 0.05));
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 1rem;
            padding: 0.4rem 1rem;
            font-size: 0.85rem;
            font-weight: 500;
            color: rgba(255, 255, 255, 0.9);
            backdrop-filter: blur(10px);
            display: flex;
            align-items: center;
            gap: 0.4rem;
            margin-bottom: 3rem;
            transition: background 0.3s ease, border-color 0.3s ease, color 0.3s ease;
        }

        .badge:hover {
            background: linear-gradient(135deg, rgba(16, 185, 129, 0.15), rgba(16, 185, 129, 0.08));
            border-color: #10b981;
            color: #10b981;
            cursor: pointer;
        }

        .badge:hover .badge-icon path,
        .badge:hover .badge-icon circle {
            stroke: #10b981;
        }

        .badge-icon {
            width: 16px;
            height: 16px;
        }

        .hero-title {
            font-size: 3.5rem;
            font-weight: 700;
            margin-bottom: 1.5rem;
            letter-spacing: -0.02em;
            background: linear-gradient(to bottom, #fff 0%, #ccc 50%, #000 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .hero-desc {
            font-size: 1.2rem;
            color: #ccc;
            max-width: 800px;
            line-height: 1.6;
        }

        .hero-image-container {
            margin-top: 4rem;
            max-width: 800px;
            width: 100%;
            position: relative;
        }

        .hero-image {
            width: 100%;
            height: auto;
            border-radius: 12px;
            box-shadow: 
                0 25px 50px -12px rgba(0, 0, 0, 0.8),
                0 0 0 1px rgba(255, 255, 255, 0.1);
            mask-image: linear-gradient(to bottom, 
                rgba(0,0,0,1) 0%, 
                rgba(0,0,0,1) 70%, 
                rgba(0,0,0,0.8) 85%, 
                rgba(0,0,0,0.3) 95%, 
                rgba(0,0,0,0) 100%);
            -webkit-mask-image: linear-gradient(to bottom, 
                rgba(0,0,0,1) 0%, 
                rgba(0,0,0,1) 70%, 
                rgba(0,0,0,0.8) 85%, 
                rgba(0,0,0,0.3) 95%, 
                rgba(0,0,0,0) 100%);
        }

        .hero-image-container::after {
            content: '';
            position: absolute;
            bottom: -20px;
            left: 20px;
            right: 20px;
            height: 40px;
            background: rgba(0, 0, 0, 0.3);
            border-radius: 12px;
            filter: blur(20px);
            z-index: -1;
        }

        footer {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 1rem 4rem;
            font-size: 0.8rem;
            color: #888;
            border-top: 1px solid #333;
        }

        .footer-link {
            color: #888;
            text-decoration: none;
            transition: all 0.3s ease;
        }

        .footer-link:hover {
            color: #ccc;
        }

        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.9);
            backdrop-filter: blur(8px);
            z-index: 1000;
            justify-content: center;
            align-items: center;
        }

        .modal.active {
            display: flex;
        }

        .modal-content {
            background: linear-gradient(135deg, rgba(0, 0, 0, 0.8), rgba(0, 0, 0, 0.6));
            border: 1px solid rgba(255, 255, 255, 0.15);
            border-radius: 0.5rem;
            padding: 1.5rem;
            width: 90%;
            max-width: 450px;
            backdrop-filter: blur(20px);
            color: white;
            position: relative;
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
        }

        .modal-title {
            font-size: 1rem;
            font-weight: 500;
            margin: 0;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .close-btn {
            background: none;
            border: none;
            color: rgba(255, 255, 255, 0.7);
            font-size: 1.5rem;
            cursor: pointer;
            padding: 0;
            width: 24px;
            height: 24px;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s ease;
            transform-origin: center;
        }

        .close-btn:hover {
            color: #10b981;
            transform: rotate(90deg);
        }

        .form-group {
            margin-bottom: 1rem;
        }

        .form-label {
            display: flex;
            align-items: center;
            gap: 0.4rem;
            margin-bottom: 0.5rem;
            font-weight: 400;
            color: rgba(255, 255, 255, 0.9);
            font-size: 0.8rem;
        }

        .input-container {
            position: relative;
            width: 100%;
        }

        .input-icon {
            position: absolute;
            left: 12px;
            top: 50%;
            transform: translateY(-50%);
            color: rgba(255, 255, 255, 0.6);
            z-index: 1;
        }

        .form-input {
            width: 100%;
            padding: 0.75rem 2.5rem 0.75rem 2.5rem;
            background: rgba(0, 0, 0, 0.4);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 0.3rem;
            color: white;
            font-size: 1rem;
            backdrop-filter: blur(10px);
            transition: all 0.2s ease;
            box-sizing: border-box;
        }

        .password-toggle {
            position: absolute;
            right: 12px;
            top: 50%;
            transform: translateY(-50%);
            background: none;
            border: none;
            color: rgba(255, 255, 255, 0.6);
            cursor: pointer;
            padding: 4px;
            border-radius: 4px;
            transition: color 0.2s ease;
            z-index: 2;
        }

        .password-toggle:hover {
            color: rgba(255, 255, 255, 0.8);
        }

        .password-toggle:focus {
            outline: none;
            color: #10b981;
        }

        .form-input:focus {
            outline: none;
            border-color: rgba(255, 255, 255, 0.4);
            background: rgba(0, 0, 0, 0.6);
        }

        .form-input::placeholder {
            color: rgba(255, 255, 255, 0.5);
        }

        .modal-footer {
            margin-top: 1rem;
            text-align: center;
            font-size: 0.8rem;
            color: rgba(255, 255, 255, 0.6);
        }

        .modal-footer a {
            color: #10b981;
            text-decoration: none;
            cursor: pointer;
        }

        .modal-footer a:hover {
            text-decoration: underline;
        }

        .toast {
            display: none;
            position: fixed;
            bottom: 20px;
            right: 20px;
            z-index: 2000;
            min-width: 300px;
            background: linear-gradient(135deg, rgba(0, 0, 0, 0.8), rgba(0, 0, 0, 0.6));
            border-radius: 8px;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.3), 0 2px 4px -1px rgba(0, 0, 0, 0.2);
            border: 1px solid rgba(255, 255, 255, 0.15);
            padding: 1rem;
            backdrop-filter: blur(10px);
        }

        .toast-icon {
            display: none;
        }

        .toast.success .success-icon {
            display: block;
        }

        .toast.error .error-icon {
            display: block;
        }

        .toast-title {
            color: #fff;
            font-weight: 600;
            margin-bottom: 0.25rem;
            font-size: 1rem;
        }

        .toast-message {
            color: rgba(255, 255, 255, 0.9);
            font-size: 0.875rem;
        }

        .toast-close {
            color: rgba(255, 255, 255, 0.6);
        }

        .toast-close:hover {
            background-color: rgba(255, 255, 255, 0.1);
            color: #fff;
        }
        .toast.active {
            display: flex;
            animation: slideIn 0.3s ease-out;
        }

        .toast-content {
            display: flex;
            align-items: flex-start;
            gap: 1rem;
            width: 100%;
        }

        .toast-icon {
            width: 24px;
            height: 24px;
            flex-shrink: 0;
        }

        .toast.error .toast-icon {
            color: #ef4444;
        }

        .toast.success .toast-icon {
            color: #10b981;
        }

        .toast-text {
            flex: 1;
        }

        .toast-title {
            color: #fff;
            font-weight: 600;
            margin-bottom: 0.25rem;
        }

        .toast-message {
            color: rgba(255, 255, 255, 0.9);
            font-size: 0.875rem;
        }

        .toast-close {
            background: none;
            border: none;
            padding: 0.375rem;
            margin: -0.375rem;
            color: #6b7280;
            cursor: pointer;
            border-radius: 9999px;
            transition: all 0.2s;
        }

        .toast-close:hover {
            background-color: #f3f4f6;
            color: #374151;
        }

        .form-input.error {
            border-color: #ef4444;
        }

        .error-text {
            color: #ef4444;
            font-size: 0.75rem;
            margin-top: 0.25rem;
            display: none;
        }

        .error-text.active {
            display: block;
        }

        @keyframes slideIn {
            from { transform: translateX(100%); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }


        ::-webkit-scrollbar {
            width: 8px;
            height: 8px;
        }

        ::-webkit-scrollbar-track {
            background: rgba(0, 0, 0, 0.1);
            border-radius: 4px;
        }

        ::-webkit-scrollbar-thumb {
            background: linear-gradient(135deg, #10b981, #059669);
            border-radius: 4px;
            transition: all 0.3s ease;
        }

        ::-webkit-scrollbar-thumb:hover {
            background: linear-gradient(135deg, #059669, #047857);
        }

        ::-webkit-scrollbar-corner {
            background: transparent;
        }


        * {
            scrollbar-width: thin;
            scrollbar-color: #10b981 rgba(0, 0, 0, 0.1);
        }

        @media (max-width: 768px) {
            header, footer {
                padding: 1.5rem 2rem;
            }
            
            .hero-title {
                font-size: 2.5rem;
            }
            
            .hero-desc {
                font-size: 1rem;
            }

            .hero-image-container {
                margin-top: 2rem;
                max-width: 85%;
            }


        }

        @supports (-webkit-touch-callout: none) {
            body {
                color-scheme: light !important;
            }
            
            * {
                color-scheme: light !important;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <div class="logo">
                <img src="https://i.imgur.com/81xiGlQ.png" alt="Logo" class="logo-icon" style="width: 16px; height: 16px; object-fit: contain;">
                Next System
            </div>
            <button class="btn" onclick="openModal('loginModal')">
                <svg width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M15 3h4a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-4"/>
                    <polyline points="10,17 15,12 10,7"/>
                    <line x1="15" y1="12" x2="3" y2="12"/>
                </svg>
                Login
            </button>
        </header>

        <main>
            <div class="badge">
                <svg class="badge-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M9 12l2 2 4-4"/>
                    <circle cx="12" cy="12" r="10"/>
                </svg>
                Next System
            </div>
            <h1 class="hero-title">Gerencie suas contas</h1>
            <p class="hero-desc">
                Acesse suas credenciais de forma segura e organizada. Simplicidade e proteção em um só lugar.
            </p>
            

            <div class="hero-image-container">
                <img src="https://i.imgur.com/ZxQvc4J.png" alt="Dashboard Preview" class="hero-image">
            </div>
        </main>

        <footer>
            <div>© 2025 Next System — Todos os direitos reservados.</div>
            <a href="https://nextsystem.site/" class="footer-link">nextsystem.site</a>
        </footer>
    </div>

    <div class="modal" id="loginModal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 class="modal-title">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <rect x="3" y="11" width="18" height="11" rx="2" ry="2"/>
                        <path d="M7 11V7a5 5 0 0 1 10 0v4"/>
                    </svg>
                    Login
                </h2>
                <button class="close-btn" onclick="closeModal('loginModal')">&times;</button>
            </div>
            <div class="form-group">
                <div class="input-container">
                    <svg class="input-icon" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z"/>
                        <polyline points="22,6 12,13 2,6"/>
                    </svg>
                    <input type="email" id="loginEmail" class="form-input" placeholder="Email">
                </div>
                <div class="error-text"></div>
            </div>
            <div class="form-group">
                <div class="input-container">
                    <svg class="input-icon" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <rect x="3" y="11" width="18" height="11" rx="2" ry="2"/>
                        <path d="M7 11V7a5 5 0 0 1 10 0v4"/>
                    </svg>
                    <input type="password" id="loginPassword" class="form-input" placeholder="Senha">
                    <button type="button" class="password-toggle" onclick="togglePassword('loginPassword')">
                        <svg class="eye-icon" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"/>
                            <circle cx="12" cy="12" r="3"/>
                        </svg>
                        <svg class="eye-off-icon" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" style="display: none;">
                            <path d="M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24"/>
                            <line x1="1" y1="1" x2="23" y2="23"/>
                        </svg>
                    </button>
                </div>
                <div class="error-text"></div>
            </div>
            <button onclick="login()" class="btn" style="width: 100%; justify-content: center;">
                <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M15 3h4a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-4"/>
                    <polyline points="10,17 15,12 10,7"/>
                    <line x1="15" y1="12" x2="3" y2="12"/>
                </svg>
                Entrar
            </button>
            <div class="modal-footer" style="margin-top: .5rem;">
                <a onclick="switchModal('loginModal', 'forgotModal')">Esqueceu a senha?</a>
            </div>
            <div class="modal-footer">
                Não tem uma conta? <a onclick="switchModal('loginModal', 'registerModal')">Registre-se</a>
            </div>
        </div>
    </div>

    <div class="modal" id="registerModal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 class="modal-title">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"/>
                        <circle cx="8.5" cy="7" r="4"/>
                        <line x1="20" y1="8" x2="20" y2="14"/>
                        <line x1="23" y1="11" x2="17" y2="11"/>
                    </svg>
                    Registro
                </h2>
                <button class="close-btn" onclick="closeModal('registerModal')">&times;</button>
            </div>
            <div class="form-group">
                <div class="input-container">
                    <svg class="input-icon" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z"/>
                        <polyline points="22,6 12,13 2,6"/>
                    </svg>
                    <input type="email" id="registerEmail" class="form-input" placeholder="Email">
                </div>
                <div class="error-text"></div>
            </div>
            <div class="form-group">
                <div class="input-container">
                    <svg class="input-icon" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <rect x="3" y="11" width="18" height="11" rx="2" ry="2"/>
                        <path d="M7 11V7a5 5 0 0 1 10 0v4"/>
                    </svg>
                    <input type="password" id="registerPassword" class="form-input" placeholder="Senha">
                    <button type="button" class="password-toggle" onclick="togglePassword('registerPassword')">
                        <svg class="eye-icon" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"/>
                            <circle cx="12" cy="12" r="3"/>
                        </svg>
                        <svg class="eye-off-icon" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" style="display: none;">
                            <path d="M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24"/>
                            <line x1="1" y1="1" x2="23" y2="23"/>
                        </svg>
                    </button>
                </div>
                <div class="error-text"></div>
            </div>
            <button onclick="register()" class="btn" style="width: 100%; justify-content: center;">
                <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"/>
                    <circle cx="8.5" cy="7" r="4"/>
                    <line x1="20" y1="8" x2="20" y2="14"/>
                    <line x1="23" y1="11" x2="17" y2="11"/>
                </svg>
                Registrar
            </button>
            <div class="modal-footer">
                Já tem uma conta? <a onclick="switchModal('registerModal', 'loginModal')">Faça login</a>
            </div>
        </div>
    </div>

    <div class="modal" id="forgotModal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 class="modal-title">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <path d="M3 7l9-4 9 4-9 4-9-4z"/>
                        <path d="M21 10l-9 4-9-4"/>
                        <path d="M21 14l-9 4-9-4"/>
                    </svg>
                    Recuperar Senha
                </h2>
                <button class="close-btn" onclick="closeModal('forgotModal')">&times;</button>
            </div>
            <div id="forgotStepEmail">
                <div class="form-group">
                    <div class="input-container">
                        <svg class="input-icon" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <path d="M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z"/>
                            <polyline points="22,6 12,13 2,6"/>
                        </svg>
                        <input type="email" id="forgotEmail" class="form-input" placeholder="Seu email">
                    </div>
                    <div class="error-text"></div>
                </div>
                <button onclick="sendRecoveryCode()" class="btn" style="width: 100%; justify-content: center;">Enviar código</button>
            </div>
            <div id="forgotStepCode" style="display:none;">
                <div class="form-group">
                    <div class="input-container">
                        <svg class="input-icon" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <circle cx="12" cy="12" r="10"/>
                            <path d="M12 6v6l4 2"/>
                        </svg>
                        <input type="text" id="forgotCode" class="form-input" placeholder="Código de verificação (6 dígitos)" maxlength="6">
                    </div>
                    <div class="error-text"></div>
                </div>
                <div class="form-group">
                    <div class="input-container">
                        <svg class="input-icon" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <rect x="3" y="11" width="18" height="11" rx="2" ry="2"/>
                            <path d="M7 11V7a5 5 0 0 1 10 0v4"/>
                        </svg>
                        <input type="password" id="forgotNewPassword" class="form-input" placeholder="Nova senha">
                        <button type="button" class="password-toggle" onclick="togglePassword('forgotNewPassword')">
                            <svg class="eye-icon" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"/>
                                <circle cx="12" cy="12" r="3"/>
                            </svg>
                            <svg class="eye-off-icon" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" style="display: none;">
                                <path d="M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24"/>
                                <line x1="1" y1="1" x2="23" y2="23"/>
                            </svg>
                        </button>
                    </div>
                    <div class="error-text"></div>
                </div>
                <button onclick="verifyRecoveryCode()" class="btn" style="width: 100%; justify-content: center;">Redefinir senha</button>
                <div class="modal-footer" style="margin-top:.5rem;">
                    <a onclick="resendCode()">Reenviar código</a>
                </div>
            </div>
        </div>
    </div>

    <div class="toast" id="toast">
        <div class="toast-content">
            <svg class="toast-icon success-icon" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
            <svg class="toast-icon error-icon" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <circle cx="12" cy="12" r="10" />
                <line x1="15" y1="9" x2="9" y2="15" />
                <line x1="9" y1="9" x2="15" y2="15" />
            </svg>
            <div class="toast-text">
                <div class="toast-title" id="toastTitle"></div>
                <div class="toast-message" id="toastMessage"></div>
            </div>
            <button class="toast-close" onclick="hideToast()">
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <line x1="18" y1="6" x2="6" y2="18"></line>
                    <line x1="6" y1="6" x2="18" y2="18"></line>
                </svg>
            </button>
        </div>
    </div>
    <script>
        function openModal(modalId) {
            document.getElementById(modalId).classList.add('active');
            document.getElementById(modalId === 'loginModal' ? 'loginEmail' : 'registerEmail').focus();
        }

        function closeModal(modalId) {
            document.getElementById(modalId).classList.remove('active');
            if (modalId === 'loginModal') {
                document.getElementById('loginEmail').value = '';
                document.getElementById('loginPassword').value = '';
            } else {
                document.getElementById('registerEmail').value = '';
                document.getElementById('registerPassword').value = '';
            }
            const inputs = document.querySelectorAll('.form-input');
            inputs.forEach(input => {
                input.classList.remove('error');
                input.parentElement.nextElementSibling.classList.remove('active');
            });
        }

        function switchModal(fromModal, toModal) {
            closeModal(fromModal);
            openModal(toModal);
        }

        document.querySelectorAll('.modal').forEach(modal => {
            modal.addEventListener('click', function(e) {
                if (e.target === this) {
                    closeModal(this.id);
                }
            });
        });

        document.addEventListener('keydown', function(e) {
            if (e.key === 'Escape') {
                document.querySelectorAll('.modal').forEach(modal => {
                    closeModal(modal.id);
                });
            }
        });

        function showToast(title, message, type = 'success') {
            const toast = document.getElementById('toast');
            document.getElementById('toastTitle').textContent = title;
            document.getElementById('toastMessage').textContent = message;
            toast.classList.remove('success', 'error');
            toast.classList.add('active', type);
            setTimeout(hideToast, 5000);
        }

        function hideToast() {
            const toast = document.getElementById('toast');
            toast.classList.remove('active', 'success', 'error');
        }

        function validateEmail(email, inputId) {
            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            const input = document.getElementById(inputId);
            const errorText = input.parentElement.nextElementSibling;

            if (!email) {
                input.classList.add('error');
                errorText.textContent = 'Digite seu email';
                errorText.classList.add('active');
                return false;
            }

            if (!emailRegex.test(email)) {
                input.classList.add('error');
                errorText.textContent = 'Email inválido';
                errorText.classList.add('active');
                return false;
            }

            input.classList.remove('error');
            errorText.classList.remove('active');
            return true;
        }

        function validatePassword(password, inputId) {
            const input = document.getElementById(inputId);
            const errorText = input.parentElement.nextElementSibling;

            if (!password) {
                input.classList.add('error');
                errorText.textContent = 'Digite sua senha';
                errorText.classList.add('active');
                return false;
            }

            input.classList.remove('error');
            errorText.classList.remove('active');
            return true;
        }

        async function login() {
            const email = document.getElementById('loginEmail').value;
            const password = document.getElementById('loginPassword').value;

            if (!validateEmail(email, 'loginEmail') || !validatePassword(password, 'loginPassword')) {
                return;
            }

            try {
                const response = await fetch('/api/auth/login.php', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ email, password })
                });

                const data = await response.json();

                if (data.status === 'success') {
                    document.cookie = `token=${data.token}; path=/; max-age=86400; SameSite=Strict`;
                    showToast('Sucesso!', 'Login realizado com sucesso!');
                    setTimeout(() => window.location.href = '/dashboard/', 1000);
                } else {
                    showToast('Erro!', data.message || 'Erro ao fazer login', 'error');
                }
            } catch (error) {
                console.error('Erro:', error);
                showToast('Erro!', 'Erro ao conectar com o servidor', 'error');
            }
        }

        async function register() {
            const email = document.getElementById('registerEmail').value;
            const password = document.getElementById('registerPassword').value;

            if (!validateEmail(email, 'registerEmail') || !validatePassword(password, 'registerPassword')) {
                return;
            }

            try {
                const response = await fetch('/api/auth/register.php', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ email, password })
                });

                const data = await response.json();

                if (data.status === 'success') {
                    showToast('Sucesso', 'Registro realizado!');
                    document.cookie = `token=${data.token}; path=/; max-age=86400`;
                    setTimeout(() => window.location.href = '/dashboard/', 1000);
                } else {
                    showToast('Erro', data.message || 'Erro ao registrar', 'error');
                }
            } catch (error) {
                console.error('Erro:', error);
                showToast('Erro', 'Erro ao conectar com o servidor', 'error');
            }
        }

        let recoveryToken = '';
        let recoveryEmail = '';

        async function sendRecoveryCode() {
            const email = document.getElementById('forgotEmail').value;
            if (!validateEmail(email, 'forgotEmail')) return;
            try {
                const res = await fetch('/api/auth/forgot/SendCode.php', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ email })
                });
                const data = await res.json();
                if (data.status === 'success') {
                    recoveryToken = data.token || '';
                    recoveryEmail = email;
                    document.getElementById('forgotStepEmail').style.display = 'none';
                    document.getElementById('forgotStepCode').style.display = 'block';
                    showToast('Verificação', 'Enviamos um código para seu email');
                } else {
                    showToast('Erro', data.message || 'Erro ao enviar código', 'error');
                }
            } catch (e) {
                showToast('Erro', 'Falha ao enviar código', 'error');
            }
        }

        async function verifyRecoveryCode() {
            const code = document.getElementById('forgotCode').value.trim();
            const newPassword = document.getElementById('forgotNewPassword').value;
            if (!code || code.length !== 6) {
                const input = document.getElementById('forgotCode');
                const errorText = input.parentElement.nextElementSibling;
                input.classList.add('error');
                errorText.textContent = 'Digite o código de 6 dígitos';
                errorText.classList.add('active');
                return;
            }
            if (!validatePassword(newPassword, 'forgotNewPassword')) return;
            try {
                const res = await fetch('/api/auth/forgot/VerifyCode.php', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ token: recoveryToken, code, newPassword })
                });
                const data = await res.json();
                if (data.status === 'success') {
                    showToast('Sucesso', 'Senha redefinida! Faça login.');
                    closeModal('forgotModal');
                    openModal('loginModal');
                } else {
                    showToast('Erro', data.message || 'Código inválido', 'error');
                }
            } catch (e) {
                showToast('Erro', 'Falha ao validar código', 'error');
            }
        }

        async function resendCode() {
            if (!recoveryEmail) return;
            try {
                const res = await fetch('/api/auth/forgot/SendCode.php', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ email: recoveryEmail })
                });
                const data = await res.json();
                if (data.status === 'success') {
                    recoveryToken = data.token || recoveryToken;
                    showToast('Verificação', 'Novo código enviado');
                } else {
                    showToast('Erro', data.message || 'Erro ao reenviar', 'error');
                }
            } catch (e) {
                showToast('Erro', 'Falha ao reenviar código', 'error');
            }
        }

        function togglePassword(inputId) {
            const input = document.getElementById(inputId);
            const button = input.nextElementSibling;
            const eyeIcon = button.querySelector('.eye-icon');
            const eyeOffIcon = button.querySelector('.eye-off-icon');
            
            if (input.type === 'password') {
                input.type = 'text';
                eyeIcon.style.display = 'none';
                eyeOffIcon.style.display = 'block';
            } else {
                input.type = 'password';
                eyeIcon.style.display = 'block';
                eyeOffIcon.style.display = 'none';
            }
        }

    </script>
</body>
</html>